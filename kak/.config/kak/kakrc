set global startup_info_version 20230805

hook global ModuleLoaded tmux %{ source "%val{config}/tmux.kak" }

# Custom commands
define-command open-config -docstring "open kakrc" %{ edit "%val{config}/kakrc" }
define-command write-all-kill -docstring "write-all-kill call write-all followed by kill" %{
    write-all
    kill
}

alias global wak write-all-kill
alias global wka write-all-kill
alias global wk  write-all-kill
alias global k kill
alias global wqa write-all-quit

define-command single-key-mode -params 1 %{
    declare-user-mode %arg{1}
    map global user %arg{1} ":enter-user-mode %arg{1}<ret>" -docstring "%arg{1} mode"
}

define-command find -docstring "Find files" -params 1 %{ edit %arg{1} }
complete-command -menu find shell-script-candidates %{ fd --type f }
alias global f find

# Key mapping
map global user f ':find ' -docstring "Find files"
map global user b ':buffer ' -docstring "Open buffers"
map global user <semicolon> ':comment-line<ret>' -docstring "Comment selection"
map global user h ':hlsearch-toggle<ret>' -docstring "Toggle search highlighter"

map global goto A '<a-;>:alt<ret>' -docstring "Alternative file"

declare-user-mode Goto
map global user g ':enter-user-mode Goto<ret>' -docstring "Goto mode"
map global Goto a ':alt<ret>' -docstring "Alternative file"

single-key-mode e
map global e n ':make-next-error<ret>' -docstring "Jump to next error (source)"
map global e p ':make-previous-error<ret>' -docstring "Jump to previous error (source)"
map global e N ':jump-next *make*<ret>' -docstring "Jump to next error (*make*)"
map global e P ':jump-previous *make*<ret>' -docstring "Jump to previous error (*make*)"

# map global normal / '/(?i)'

# Modules
source "%val{config}/hlsearch.kak"
source "%val{config}/novo.kak"
source "%val{config}/trail-white.kak"

# Plugins
source "%val{config}/plugins.kak"

# Line numbers
hook global WinCreate .* %{
    add-highlighter window/number-line number-lines -relative -hlcursor -separator ' '
}

define-command highlight-cursorline %{
    add-highlighter -override window/cursorline line %val{cursor_line} cursorline
}
hook global WinCreate .+ %{
    highlight-cursorline
    hook window RawKey .+ highlight-cursorline
    hook window ModeChange .+ highlight-cursorline
}


set-option global tabstop 4
set-option global indentwidth 4
hook global InsertChar \t %{
    execute-keys -draft "h<a-;>%opt{indentwidth}@"
}

hook global InsertCompletionShow .* %{
    try %{
    # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
        hook -once -always window InsertCompletionHide .* %{
            unmap window insert <tab> <c-n>
            unmap window insert <s-tab> <c-p>
        }
    }
}

single-key-mode r

evaluate-commands %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=(c|cpp) %{
    lsp-enable-window
    lsp-auto-hover-enable
    lsp-auto-signature-help-enable
    # lsp-inlay-hints-enable window
}

hook global WinSetOption filetype=(c|cpp) %{
    hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
    hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
    hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
    hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window semantic-tokens
    }
}

map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object f '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object t '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'


define-command -hidden append-remove-whitespace -docstring "Remove trailing whitespace and enter insert mode after selections" %{
    try %{ execute-keys -draft "xs\h+$<ret>d" }
    execute-keys -with-hooks "A"
}
map global normal A ':append-remove-whitespace<ret>'

declare-option str projectconfig_identifier ""
declare-option str projectconfig_path ""

hook -group projectconfig global KakBegin .* %{
    evaluate-commands %sh{
        name=$(basename $(pwd))
        echo "set-option global projectconfig_identifier ${name}"
        echo "try %{ rename-session ${name} } catch %{ rename-session ${name}-${kak_session} }"

        config_path=${kak_config}/projectconfig/${name}.kak
        if [ -f ${config_path} ]; then
            echo "set-option global projectconfig_path ${config_path}"
            echo "define-command open-projectconfig -docstring 'open projectconfig' %{ edit %opt{projectconfig_path} }"
            echo "define-command source-projectconfig -docstring 'source projectconfig' %{ source %opt{projectconfig_path} }"

        fi

        echo "try %{ source ${config_path} }"
    }
}

colorscheme tokyo-night-dark
# colorscheme github

